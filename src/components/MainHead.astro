---
import "../styles/global.css";

interface Props {
	title?: string | undefined;
	description?: string | undefined;
	image?: string | undefined;
	type?: "website" | "article" | undefined;
}

const {
	title = "Jonathan Barbeau | Generative Artist",
	description = "I am an artist and developer using Javascript and the HTML5 Canvas as a medium creation",
	image = "/assets/og/profile.png",
	type = "website",
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<meta charset='UTF-8' />
<meta name='description' content={description} />
<meta name='viewport' content='width=device-width' />
<meta name='generator' content={Astro.generator} />

<!-- Open Graph / Facebook -->
<meta property='og:type' content={type} />
<meta property='og:url' content={canonicalURL} />
<meta property='og:title' content={title} />
<meta property='og:description' content={description} />
<meta property='og:image' content={new URL(image, Astro.site)} />

<!-- Twitter -->
<meta property='twitter:card' content='summary_large_image' />
<meta property='twitter:url' content={canonicalURL} />
<meta property='twitter:title' content={title} />
<meta property='twitter:description' content={description} />
<meta property='twitter:image' content={new URL(image, Astro.site)} />

<title>{title}</title>

<link rel='icon' type='image/svg+xml' href='/favicon.svg' />
<link rel='preconnect' href='https://fonts.googleapis.com' />
<link rel='preconnect' href='https://fonts.gstatic.com' crossorigin />
<link href='https://fonts.googleapis.com/css2?family=Noto+Sans:wght@100;200;300;400;500;600;700;800;900&display=swap' rel='stylesheet' />
<script is:inline>
	// This code is inlined in the head to make dark mode instant & blocking.
	const getThemePreference = () => {
		if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
			return localStorage.getItem("theme");
		}
		return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
	};
	const isDark = getThemePreference() === "dark";
	document.documentElement.classList[isDark ? "add" : "remove"]("theme-dark");

	if (typeof localStorage !== "undefined") {
		// Watch the document element and persist user preference when it changes.
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains("theme-dark");
			localStorage.setItem("theme", isDark ? "dark" : "light");
		});
		observer.observe(document.documentElement, {attributes: true, attributeFilter: ["class"]});
	}
</script>
