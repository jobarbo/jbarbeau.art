---
import {Debug} from 'astro/components';
import Icon from '../components/Icon.astro';
import Pill from '../components/Pill.astro';
interface Props {
	title?: string;
	tagline?: string;
	topline?: string;
	align?: 'start' | 'center';
	baseURL?: string;
	image: {
		url: string;
		alternativeText: string;
	};
	isNested?: boolean;
	label?: string;
	linkURL?: string;
	tag_group?: {
		text: string;
	}[];
}

const {align = 'center', tagline, topline, title, baseURL, image, isNested, label, linkURL, tag_group} = Astro.props;
---

<header class:list={['hero stack gap-4', align]}>
	<div class='hero-container content stack gap-2'>
		<div class='hero-info'>
			{topline && <p class='tagline'>{topline}</p>}
			{title && <h1 class='title'>{title}</h1>}
			{
				// its a nested exhibition
				isNested && tag_group.length > 0 && (
					<div class='hero-tags-container'>
						<div class='hero-tags-list'>
							{tag_group.map((tag) => (
								<h>
									<Pill>{tag.text}</Pill>
								</h>
							))}
						</div>
					</div>
				)
			}
			{tagline && <p class='tagline'>{tagline}</p>}
		</div>
		<div class='hero-image'>
			{
				image.url && image.url.trim() !== '' && (
					<figure>
						<img src={`${baseURL}${image.url}`} alt={image.alternativeText} />
					</figure>
				)
			}
			{
				isNested && linkURL.length > 0 && label.length > 0 && (
					<div class='hero-render'>
						<a href={linkURL} target='_blank' class='hero-link'>
							{label} <Icon icon='magic' size='1.2em' />
						</a>
					</div>
				)
			}
		</div>
	</div>
	<slot />
</header>

<style>
	header {
		padding-bottom: 2.5rem;
		border-bottom: 1px solid var(--gray-800);
	}

	.hero {
		font-size: var(--text-lg);
		text-align: center;
	}
	.hero-container {
		display: flex;
		flex-direction: column;
		margin-top: 1.5em;
	}
	.hero-image {
		position: relative;
		margin-top: 2em;
	}
	.hero-image :global(img) {
		border-radius: 1.5rem;
		box-shadow: var(--shadow-sm);
		background: var(--gradient-subtle);
		border: 1px solid var(--gray-800);
	}
	.title,
	.tagline {
		max-width: 37ch;
		margin-inline: auto;
	}

	.title {
		font-size: var(--text-2xl);
		color: var(--gray-0);
	}

	.hero-tags-container {
		display: flex;
		flex-direction: column;
		padding: 0.5rem;
		margin: 1rem 0;
		justify-content: space-between;
		align-items: center;
	}

	.hero-tags-list {
		display: flex;
		gap: 0.5rem;
		flex-wrap: wrap;
		justify-content: flex-start;
	}

	.hero-render {
		position: absolute;
		top: 20px;
		left: 20px;
	}
	.hero-link {
		position: relative;
		display: flex;
		place-content: center;
		text-align: center;
		padding: 0.56em 2em;
		gap: 0.8em;
		color: var(--accent-text-over);
		text-decoration: none;
		line-height: 1.1;
		border-radius: 999rem;
		overflow: hidden;
		background: var(--gradient-accent-orange);
		box-shadow: var(--shadow-md);
		white-space: nowrap;
		font-size: var(--text-base);
	}

	/* Overlay for hover effects. */
	.hero-link::after {
		content: '';
		position: absolute;
		inset: 0;
		pointer-events: none;
		transition: background-color var(--theme-transition);
		mix-blend-mode: overlay;
	}

	.hero-link:focus::after,
	.hero-link:hover::after {
		background-color: hsla(var(--gray-999-basis), 0.3);
	}

	@media (min-width: 768px) {
		.hero-link {
			font-size: var(--text-lg);
		}
	}

	@media (min-width: 1280px) {
		.hero {
			font-size: var(--text-lg);
			flex-direction: row;
			justify-content: space-between;
			align-items: center;
		}

		.hero-container {
			flex-direction: row;
			justify-content: space-between;
			align-items: center;
		}

		.hero-image {
			margin-top: 0;
			margin-left: 1em;
			flex: 1;
		}
		.hero-info {
			flex: 1;
			align-self: flex-start;
		}
		.hero-link {
			padding: 1.125rem 2.5rem;
			font-size: var(--text-xl);
		}
		.start {
			text-align: start;
		}

		.start .title,
		.start .tagline {
			margin-inline: unset;
		}

		.title {
			font-size: var(--text-4xl);
		}
		.hero-tags-container {
			flex-direction: row;
			align-items: flex-start;
		}
	}
</style>
