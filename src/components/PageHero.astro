---
import {Debug} from 'astro/components';
import {marked} from 'marked';
import Icon from '../components/Icon.astro';
import Pill from '../components/Pill.astro';
interface Props {
	title?: string;
	price?: number;
	is_available?: boolean;
	tagline?: string;
	topline?: string;
	align?: 'start' | 'center';
	baseURL?: string;
	image: {
		url: string;
		alternativeText: string;
	};
	isNested?: boolean;
	label?: string;
	linkURL?: string;
	tag_group?: {
		text: string;
	}[];
}

let {
	align = 'center',
	tagline,
	topline,
	title,
	baseURL,
	image,
	isNested,
	label,
	linkURL,
	tag_group,
	price,
	is_available,
} = Astro.props;

tagline = tagline ? marked(tagline) : '';
let is_available_string = '';
let is_available_class = 'hero-availability';
if (is_available) {
	is_available_string = 'Disponible';
} else {
	is_available_string = 'Vendu';
	is_available_class = 'hero-availability hero-availability--sold';
}
---

<header class:list={['hero stack gap-4', align]}>
	<div class='hero-container content stack gap-2'>
		<div class='hero-info --desktop'>
			{topline && <p class='tagline'>{topline}</p>}
			{title && <h1 class='title'>{title}</h1>}
			{
				price != 0 && isNested && (
					<div class='hero-price-container'>
						{is_available ? <p class='hero-price' /> : <p class='hero-price hero-price--sold'>{price}$</p>}
						<div class='hero-availability-container'>
							<p class={`${is_available_class}`}>{is_available_string}</p>
						</div>
					</div>
				)
			}
			{
				// its a nested exhibition
				isNested && tag_group.length > 0 && (
					<div class='hero-tags-container'>
						<div class='hero-tags-list'>
							{tag_group.map((tag) => (
								<h>
									<Pill>{tag.text}</Pill>
								</h>
							))}
						</div>
					</div>
				)
			}
			{
				tagline && (
					<div class='tagline markdown'>
						<Fragment set:html={tagline} />{' '}
					</div>
				)
			}
		</div>
		<div class='hero-image --desktop'>
			{
				image.url && image.url.trim() !== '' && (
					<figure class='hero-figure'>
						<img src={`${baseURL}${image.url}`} alt={image.alternativeText} />

						{isNested && linkURL.length > 0 && label.length > 0 && (
							<div class='hero-render'>
								<a href={linkURL} target='_blank' class='hero-link'>
									{label} <Icon icon='magic' size='1.2em' />
								</a>
							</div>
						)}
					</figure>
				)
			}
		</div>
		<div class='hero-info --mobile'>
			{topline && <p class='tagline'>{topline}</p>}
			{title && <h1 class='title'>{title}</h1>}

			{
				price != 0 && isNested && (
					<div class='hero-price-container'>
						{is_available ? <p class='hero-price' /> : <p class='hero-price hero-price--sold'>{price}$</p>}
						<div class='hero-availability-container'>
							<p class={`${is_available_class}`}>{is_available_string}</p>
						</div>
					</div>
				)
			}
			{
				// its a nested exhibition
				isNested && tag_group.length > 0 && (
					<div class='hero-tags-container'>
						<div class='hero-tags-list'>
							{tag_group.map((tag) => (
								<Pill>{tag.text}</Pill>
							))}
						</div>
					</div>
				)
			}
			<div class='hero-image --mobile'>
				{
					image.url && image.url.trim() !== '' && (
						<figure class='hero-figure'>
							<img src={`${baseURL}${image.url}`} alt={image.alternativeText} />

							{isNested && linkURL.length > 0 && label.length > 0 && (
								<div class='hero-render'>
									<a href={linkURL} target='_blank' class='hero-link'>
										{label} <Icon icon='magic' size='1.2em' />
									</a>
								</div>
							)}
						</figure>
					)
				}
			</div>
			{
				tagline && (
					<div class='tagline markdown'>
						<Fragment set:html={tagline} />{' '}
					</div>
				)
			}
		</div>
	</div>
	<slot />
</header>

<style>
	header {
		padding-bottom: 2.5rem;
		border-bottom: 1px solid var(--gray-800);
	}

	.hero {
		font-size: var(--text-md);
		text-align: center;
	}
	.hero-availability-container {
		border-radius: 99rem;
		padding: 0.5em 1.5em;
		width: fit-content;
		display: block;
	}
	.hero-availability {
		color: rgb(11, 173, 135);
		width: auto;
		display: block;
	}
	.hero-availability--sold {
		color: rgb(255, 0, 0);
	}
	.hero-price-container {
		margin-top: 1em;
		display: flex;
		align-items: center;
		justify-content: flex-start;
	}

	.hero-price {
		color: var(--gray-0);
		font-size: 24px;
	}
	.hero-price--sold {
		color: var(--gray-0);
		font-size: 24px;
		text-decoration: line-through;
	}
	.hero-tags-list {
		width: 100%;
		display: grid;
		grid-template-columns: auto auto;
		gap: 0;
	}
	.hero-info.--desktop {
		display: none;
	}
	.hero-container {
		display: flex;
		flex-direction: column;
		margin-top: 1.5em;
	}
	.hero-image {
		position: relative;
		margin-top: 2em;
	}
	.hero-image.--desktop {
		display: none;
	}
	.hero-image :global(img) {
		border-radius: 1.5rem;
		box-shadow: var(--shadow-sm);
		background: var(--gradient-subtle);
		border: 1px solid var(--gray-800);
	}
	.title,
	.tagline {
		margin-inline: auto;
	}

	.tagline {
		margin: 1em 0;
		text-align: left;
	}
	.tagline p {
		margin-bottom: 1em;
		text-align: left;
	}

	.title {
		font-size: var(--text-2xl);
		color: var(--gray-0);
		margin-bottom: 0.5em;
		text-align: left;
	}

	.hero-tags-container {
		display: flex;
		flex-direction: column;
		padding: 0.5rem;
		margin: 1rem 0;
		justify-content: space-between;
		align-items: flex-start;
	}

	.hero-render {
		position: absolute;
		top: 20px;
		left: 20px;
	}
	.hero-link {
		position: relative;
		display: flex;
		place-content: center;
		text-align: center;
		padding: 0.56em 2em;
		gap: 0.8em;
		color: var(--accent-text-over);
		text-decoration: none;
		line-height: 1.1;
		border-radius: 999rem;
		overflow: hidden;
		background: var(--gradient-accent-orange);
		box-shadow: var(--shadow-md);
		white-space: nowrap;
		font-size: var(--text-base);
	}

	/* Overlay for hover effects. */
	.hero-link::after {
		content: '';
		position: absolute;
		inset: 0;
		pointer-events: none;
		transition: background-color var(--theme-transition);
		mix-blend-mode: overlay;
	}

	.hero-link:focus::after,
	.hero-link:hover::after {
		background-color: hsla(var(--gray-999-basis), 0.3);
	}

	@media (min-width: 768px) {
		.hero-link {
			font-size: var(--text-lg);
		}
	}

	@media (min-width: 1280px) {
		.hero {
			font-size: var(--text-lg);
			flex-direction: row;
			justify-content: space-between;
			align-items: center;
		}

		.hero-tags-list {
			display: grid;
			grid-template-columns: auto auto auto;
			gap: 0;
		}

		.hero-container {
			flex-direction: row;
			justify-content: space-between;
			align-items: center;
		}

		.hero-image {
			margin-top: 0;
			margin-left: 1em;
			flex: 1;
			align-items: flex-start;
			height: 100%;
			justify-content: flex-end;
			align-self: baseline;
		}
		.hero-image.--desktop {
			display: flex;
		}

		.hero-figure {
			width: 90%;
			position: relative;
		}
		.hero-info.--desktop {
			flex: 1;
			align-self: flex-start;
			display: block;
		}
		.hero-info.--mobile {
			display: none;
		}
		.hero-link {
			padding: 1.125rem 2.5rem;
			font-size: var(--text-xl);
		}
		.start {
			text-align: start;
		}

		.start .title,
		.start .tagline {
			margin-inline: unset;
		}

		.title {
			font-size: var(--text-4xl);
		}
		.hero-tags-container {
			flex-direction: row;
			align-items: flex-start;
		}
	}
</style>
