---
import {Debug} from "astro:components";
import type {CollectionEntry} from "astro:content";
import Icon from "../components/Icon.astro";
import {iconPaths} from "../components/IconPaths";

interface Props {
	work: CollectionEntry<"project">;
}

const {work} = Astro.props;

const isBtnDisabled = work.data.url === "" || work.data.url === "undefined" ? "disabled" : "";
---

<li class='recent-work-item'>
	<hr />
	<div class='work-layout'>
		<h3 class='work-description-title'>{work.data.title}</h3>
		<p class='work-description-info'>{work.data.subtitle}</p>
		<div class='work-description-link-wrapper'>
			<a class=`work-description-link button ${isBtnDisabled}` href={work.data.url} target='_blank'>
				View Project
				<Icon isButton={true} icon={"external"} />
			</a>
			{
				work.data.isRedeemable && (
					<a class='work-description-link button' href={work.data.redeemUrl} target='_blank'>
						Redeem here!
						<Icon isButton={true} icon={"external"} />
					</a>
				)
			}
			<a href='mailto:barbeau.jonathan@gmail.com' class='work-description-mailto button'> Email me for inquiries </a>
		</div>

		<div data-slider={work.data.slider} class='work-image-row blaze-slider'>
			<div class='blaze-container'>
				<div class='blaze-track-container'>
					<div class='blaze-track'>
						{work.data.images.map((url) => <img src={url} alt='' class='work-image' />)}
					</div>
				</div>
				<div class='work-description'>
					<div class='work-description-wrapper'>
						<h4 class='work-description-title'>Description</h4>
						<p class='work-description-text'>{work.data.description}</p>
					</div>
					<!-- navigation buttons -->
					<div class='blaze-btn'>
						<button class='blaze-prev'>previous</button>
						<button class='blaze-next'>next</button>
					</div>
				</div>
			</div>
		</div>
	</div>
</li>

<script>
	import BlazeSlider from "blaze-slider";
	import "blaze-slider/dist/blaze.css";

	const el_array = document.querySelectorAll(".blaze-slider") as NodeListOf<HTMLElement>;

	el_array.forEach((el) => {
		// convert the data attribute to a an array by splitting it at the comma and then removing the comma
		let sliderArray = el.dataset.slider.split(",").map((item) => Number(item.trim()));

		console.log(sliderArray);
		new BlazeSlider(el, {
			all: {
				transitionDuration: 300,
				slidesToShow: sliderArray[0] || 3, // use the first value of sliderArray, or default to 3 if it's not available
				loop: false,
			},
			"(max-width: 900px)": {
				slidesToShow: sliderArray[1] || 2, // use the second value of sliderArray, or default to 2 if it's not available
			},
			"(max-width: 500px)": {
				slidesToShow: sliderArray[2] || 1, // use the third value of sliderArray, or default to 1 if it's not available
			},
		});
	});
</script>

<style>
	.work-description {
		margin: 1em 0;
		max-width: 100%;
		display: flex;
		flex-direction: column-reverse;
	}
	.work-description-info {
		margin: 0.15em 0;
		font-size: 0.8em;
		color: var(--accent-regular);
	}
	.work-description-text {
		line-height: 1.25em;
		margin: 0.5em 0 2em 0;
		white-space: pre-wrap;
	}

	.work-description-link.disabled {
		pointer-events: none;
		cursor: default;
		opacity: 0.6;
	}
	.work-layout {
		display: flex;
		flex-direction: column;
		overflow: visible;
		margin-top: 2em;
	}
	.work-image-row {
		display: flex;
		flex-direction: row;
		gap: 0.5em;
	}

	.work-description-link-wrapper {
		display: flex;
		gap: 1em;
	}

	.blaze-track {
		margin: 1em 0 3em 0;
	}

	/* remove the scrollbar */
	.work-image-row::-webkit-scrollbar {
		display: none;
	}

	.work-image {
		max-height: 100%; /* Fill the cell's height */
		max-width: 100%;
		height: auto;
		box-shadow:
			1.3px 0.9px 1.8px rgba(0, 0, 0, 0.02),
			2px 1.4px 3.5px rgba(0, 0, 0, 0.02),
			2.4px 1.7px 5.1px rgba(0, 0, 0, 0.02),
			2.6px 1.9px 6.6px rgba(0, 0, 0, 0.02),
			2.8px 2px 8px rgba(0, 0, 0, 0.019),
			3.2px 2.3px 9.5px rgba(0, 0, 0, 0.019),
			3.9px 2.8px 11.1px rgba(0, 0, 0, 0.018),
			5.3px 3.8px 13.1px rgba(0, 0, 0, 0.018),
			8.2px 5.9px 15.7px rgba(0, 0, 0, 0.017),
			21px 15px 19px rgba(0, 0, 0, 0.014);
	}

	.recent-work-item {
		margin-top: 2em;
	}

	.button {
		padding: 0.5em 1em;
		border-radius: 50px;
		background-color: var(--gray-0);
		color: var(--gray-999);
		text-decoration: none;
		display: flex;
		align-items: center;
		justify-content: center;
		width: fit-content;
		margin: 1em 0;
		border: 1px solid black;
		transition: all 0.3s;
	}

	.blaze-btn {
		margin-top: 1em;
		display: flex;
		justify-content: flex-end;
	}

	.blaze-prev,
	.blaze-next {
		padding: 0.1em 1em 0.25em 1em;
		border-radius: 50px;
		background-color: black;
		color: white;
		font-size: 16px;
		margin-left: 1em;
		border: 1px solid black;
		transition: all 0.3s;
	}

	.blaze-prev:before {
		content: "\2039";
		padding-right: 0.5em;
		font-size: 16px;
	}
	.blaze-next:after {
		content: "\203A";
		padding-left: 0.5em;
		font-size: 16px;
	}

	.blaze-track-container {
		overflow: visible;
		cursor: grab;
	}

	@media (min-width: 1024px) {
		.work-image-row {
			gap: 1em;
		}

		.work-image {
			max-height: 100%; /* Fill the cell's height */
			max-width: 100%;
			height: auto;
		}
		.work-description {
			margin: 1em 0;
			max-width: 100%;
			display: flex;
			align-items: flex-start;
			justify-content: space-between;
			flex-direction: row;
		}

		.work-description-text {
			max-width: 75%;
		}
		.blaze-next:hover,
		.blaze-prev:hover {
			background-color: white;
			color: black;
			border: 1px solid black;
		}
		.button:hover {
			background-color: white;
			color: black;
			border: 1px solid black;
		}
	}
</style>
