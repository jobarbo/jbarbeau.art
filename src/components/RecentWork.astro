---
import type {CollectionEntry} from "astro:content";
import Icon from "../components/Icon.astro";
import Button from "../components/Button.astro";
import {Image} from "astro:assets";

interface Props {
	work: CollectionEntry<"project">;
}

const {work} = Astro.props;

const isBtnDisabled = work.data.url === "" || work.data.url === "undefined" ? "disabled" : "";
---

<li class='recent-work-item'>
	<hr />
	<div class='work-layout'>
		<h3 class='work-description-title'>{work.data.title}</h3>
		<p class='work-description-info'>{work.data.subtitle}</p>
		<div class='work-description-link-wrapper'>
			<Button label='View Project' icon='external' href={work.data.url} target='_blank' class={`work-description-link ${isBtnDisabled}`} />
			{work.data.isRedeemable && <Button label='Redeem here!' icon='external' href={work.data.redeemUrl} target='_blank' class='work-description-link' />}
			<Button label='Email me for inquiries' target='_blank' icon='email' href='mailto:barbeau.jonathan@gmail.com' class='work-description-link' />
		</div>

		<div data-slider={work.data.slider} class='work-image-row blaze-slider'>
			<div class='blaze-container'>
				<div class='blaze-track-container'>
					<div class='blaze-track'>
						{work.data.images.map((url, index) => <img alt='' class='work-image' width={300} height={200} loading='lazy' data-src={url} />)}
					</div>
				</div>
				<div class='work-description'>
					<div class='work-description-wrapper'>
						<h4 class='work-description-title'>Description</h4>
						<p class='work-description-text'>{work.data.description}</p>
					</div>
					<!-- navigation buttons -->
					<div class='blaze-btn'>
						<button class='blaze-prev'>
							<span><Icon isButton={true} icon={"chevron_left"} /></span>
							<span class='-mt-0.5'>previous</span>
						</button>
						<button class='blaze-next'>
							<span class='-mt-0.5'>next</span>
							<span><Icon isButton={true} icon={"chevron_right"} /></span>
						</button>
					</div>
				</div>
			</div>
		</div>
	</div>
</li>

<script>
	import BlazeSlider from "blaze-slider";
	import "blaze-slider/dist/blaze.css";

	const el_array = document.querySelectorAll(".blaze-slider") as NodeListOf<HTMLElement>;

	el_array.forEach((el) => {
		// convert the data attribute to a an array by splitting it at the comma and then removing the comma
		let sliderArray = el.dataset.slider.split(",").map((item) => Number(item.trim()));

		new BlazeSlider(el, {
			all: {
				transitionDuration: 300,
				slidesToShow: sliderArray[0] || 3, // use the first value of sliderArray, or default to 3 if it's not available
				loop: false,
			},
			"(max-width: 900px)": {
				slidesToShow: sliderArray[1] || 2, // use the second value of sliderArray, or default to 2 if it's not available
			},
			"(max-width: 500px)": {
				slidesToShow: sliderArray[2] || 1, // use the third value of sliderArray, or default to 1 if it's not available
			},
		});
	});

	// Add this new code for intersection observer
	const images = document.querySelectorAll(".work-image");
	const config = {
		rootMargin: "0px",
		threshold: 0.1,
	};

	let observer = new IntersectionObserver((entries, self) => {
		entries.forEach((entry) => {
			if (entry.isIntersecting) {
				let image = entry.target as HTMLImageElement;
				if (image.dataset.src) {
					image.src = image.dataset.src; // Set the src from data-src
					image.removeAttribute("loading"); // Remove loading attribute
					self.unobserve(entry.target); // Stop observing once loaded
				}
			}
		});
	}, config);

	images.forEach((image) => {
		observer.observe(image);
	});
</script>

<style lang='scss'>
	@use "../styles/components/RecentWork.scss";
</style>
