---
import Layout from "../layouts/Layout.astro";
import BlogPostPreview from "../components/BlogPostPreview.astro";
import Parser from "rss-parser";

// Initialize RSS parser with content:encoded support
const parser = new Parser({
	customFields: {
		item: [
			["content:encoded", "contentEncoded"],
			["description", "description"],
			["enclosure", "image"],
		],
	},
	timeout: 10000,
	requestOptions: {
		rejectUnauthorized: false,
	},
});

const SUBSTACK_RSS_URL = "https://jbarbeau.substack.com/feed";
const TARGET_SLUG = "paths-meet-connections-emerge";

// Function to convert emoji codes to actual emojis
function decodeEmoji(text) {
	return text?.replace(/&#(\d+);/g, (match, dec) => String.fromCodePoint(dec)) || "";
}

// Function to optimize Substack image URLs
function optimizeImageUrl(url: string, width = 600) {
	if (!url) return null;
	try {
		// Check if it's already a Substack CDN URL
		if (url.includes("substackcdn.com")) {
			// Get everything after /fetch/
			const fetchIndex = url.indexOf("/fetch/");
			if (fetchIndex === -1) return url;

			const afterFetch = url.slice(fetchIndex + 7);
			const originalUrl = afterFetch.split("/").slice(1).join("/");

			// Construct new optimized URL
			return `https://substackcdn.com/image/fetch/w_${width},c_limit,f_auto,q_auto:good/${originalUrl}`;
		}
		return url;
	} catch (e) {
		console.error("Error optimizing image URL:", e);
		return url;
	}
}

// Fetch blog posts
let posts = [];
try {
	const response = await fetch(SUBSTACK_RSS_URL);
	if (!response.ok) {
		throw new Error(`HTTP error! status: ${response.status}`);
	}
	const feedText = await response.text();

	const feed = await parser.parseString(feedText);

	if (!feed.items || feed.items.length === 0) {
		console.error("No items found in feed");
		posts = [];
	} else {
		posts = feed.items.map((post: any) => {
			// Extract slug from the URL
			const parts = post.link.split("/p/");
			const lastPart = parts[parts.length - 1];
			const withoutQuery = lastPart?.split("?")[0];
			const slug = withoutQuery?.split("#")[0];

			// Get and optimize the image URL
			const originalImageUrl = post.enclosure?.url;
			const optimizedImageUrl = optimizeImageUrl(originalImageUrl);

			// Use the description field for the excerpt, remove CDATA wrapper if present

			// Use the description field for the excerpt, remove CDATA wrapper if present
			let excerpt = post.description || "";
			excerpt = excerpt.replace(/<!\[CDATA\[(.*?)\]\]>/g, "$1").trim();

			// Convert emoji codes to actual emojis
			excerpt = decodeEmoji(excerpt);

			return {
				title: post.title,
				link: post.link,
				pubDate: post.pubDate,
				excerpt,
				slug,
				image: optimizedImageUrl,
			};
		});
	}
} catch (error) {
	console.error("\n=== Blog Page Error ===");
	console.error("Error:", error);
	if (error instanceof Error) {
		console.error("Error message:", error.message);
		console.error("Error stack:", error.stack);
	}
}
---

<Layout title='Blog | J Barbeau'>
	<main class='container mx-auto px-4 py-8 max-w-7xl'>
		<h1 class='text-4xl font-bold mb-8'>Blog</h1>

		{
			posts.length > 0 ? (
				<div class='grid grid-cols-1 md:grid-cols-2 gap-8'>
					{posts.map((post) => (
						<BlogPostPreview title={post.title} link={post.link} pubDate={post.pubDate} excerpt={post.excerpt} slug={post.slug} image={post.image} />
					))}
				</div>
			) : (
				<p class='text-gray-600'>Unable to load blog posts at this time. Please check back later.</p>
			)
		}
	</main>
</Layout>
