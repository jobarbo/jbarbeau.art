---
import Layout from "../layouts/Layout.astro";
import BlogPostPreview from "../components/BlogPostPreview.astro";
import Parser from "rss-parser";

// Initialize RSS parser with content:encoded support
const parser = new Parser({
	customFields: {
		item: [["content:encoded", "contentEncoded"]],
	},
	timeout: 10000, // Increase timeout
	requestOptions: {
		rejectUnauthorized: false, // Allow self-signed certificates
	},
});

const SUBSTACK_RSS_URL = "https://jbarbeau.substack.com/feed";
const TARGET_SLUG = "paths-meet-connections-emerge";

// Fetch blog posts
let posts = [];
try {
	// First try to fetch the feed using fetch API
	const response = await fetch(SUBSTACK_RSS_URL);
	if (!response.ok) {
		throw new Error(`HTTP error! status: ${response.status}`);
	}
	const feedText = await response.text();
	console.log("\n=== Blog Page Feed Debug ===");
	console.log("Feed content length:", feedText.length);

	// Now parse the feed
	const feed = await parser.parseString(feedText);
	console.log("Number of items:", feed.items?.length);

	if (!feed.items || feed.items.length === 0) {
		console.error("No items found in feed");
		posts = [];
	} else {
		posts = feed.items.map((post: any) => {
			// Split and log each step
			const parts = post.link.split("/p/");
			const lastPart = parts[parts.length - 1];
			const withoutQuery = lastPart?.split("?")[0];
			const slug = withoutQuery?.split("#")[0];

			// Log if this is the target post
			if (slug === TARGET_SLUG) {
				console.log("\nFound target post in blog listing:");
				console.log({
					title: post.title,
					link: post.link,
					slug: slug,
				});
			}

			// Create an excerpt from the content:encoded or fallback to regular content
			const fullContent = post.contentEncoded || post.content;
			const excerpt =
				post.description ||
				fullContent
					.replace(/<[^>]*>/g, "") // Remove HTML tags
					.replace(/\s+/g, " ") // Normalize whitespace
					.trim()
					.slice(0, 280) + "..."; // Limit to 280 characters

			return {
				title: post.title,
				link: post.link,
				pubDate: post.pubDate,
				excerpt,
				slug,
			};
		});

		// Log all generated slugs
		console.log("\nAll blog listing slugs:", posts.map((p) => p.slug).join(", "));
	}
} catch (error) {
	console.error("\n=== Blog Page Error ===");
	console.error("Error:", error);
	if (error instanceof Error) {
		console.error("Error message:", error.message);
		console.error("Error stack:", error.stack);
	}
}
---

<Layout title='Blog | J Barbeau'>
	<main class='container mx-auto px-4 py-8 max-w-4xl'>
		<h1 class='text-4xl font-bold mb-8'>Blog</h1>

		{
			posts.length > 0 ? (
				<div class='space-y-8'>
					{posts.map((post) => (
						<BlogPostPreview title={post.title} link={post.link} pubDate={post.pubDate} excerpt={post.excerpt} slug={post.slug} />
					))}
				</div>
			) : (
				<p class='text-gray-600'>Unable to load blog posts at this time. Please check back later.</p>
			)
		}
	</main>
</Layout>
