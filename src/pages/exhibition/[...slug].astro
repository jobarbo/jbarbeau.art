---
import {Debug} from 'astro/components';
import {CollectionEntry, getCollection} from 'astro:content';

import BaseLayout from '../../layouts/BaseLayout.astro';

import ContactCTA from '../../components/ContactCTA.astro';
import Hero from '../../components/Hero.astro';
import Icon from '../../components/Icon.astro';
import Pill from '../../components/Pill.astro';
import SingleGallery from '../../components/SingleGallery.astro';

interface Props {
	entry: CollectionEntry<'exhibition'>;
}

// This is a dynamic route that generates a page for every Markdown file in src/content/
// Read more about dynamic routes and this `getStaticPaths` function in the Astro docs:
// https://docs.astro.build/en/core-concepts/routing/#dynamic-routes
export async function getStaticPaths() {
	const exhibition = await getCollection('exhibition');
	return exhibition.map((entry) => ({
		params: {slug: entry.slug},
		props: {entry},
	}));
}

const {entry} = Astro.props;
const {Content} = await entry.render();

// take the id from the entry and remove the characters that start at . and after

const id = Number(entry.id.split('.')[0]);
// make id a number

interface Artwork {
	id: number;
	attributes: {
		Title: string;
		Description: string;
		Image: {
			data: {
				attributes: {
					url: string;
					alternativeText: string;
				};
			};
		};
		Gallery: {
			data: {
				attributes: {
					url: string;
					alternativeText: string;
				};
			};
		};
		tagGroup: {
			text: string;
		};
		// add more properties as needed
	};
	// add more properties as needed
}
const response = await fetch('http://localhost:1337/api/artworks?populate=*');
const json = await response.json();
const baseURL = 'http://localhost:1337';

// convert the data to an array

const artworks = json.data.map((artwork: Artwork) => artwork);

const matchingArtwork = artworks.find((artwork) => artwork.id === id);

const single = matchingArtwork.attributes;
const image = single.Image.data.attributes;
const gallery = single.Gallery.data.map((image) => image.attributes);
const tags = single.tagGroup;
console.log(image.url);
---

<Debug {artworks} />
<BaseLayout title={single.Title} description={single.Description}>
	<div class='stack gap-20'>
		<div class='stack gap-15'>
			<header>
				<div class='wrapper stack gap-2'>
					<a class='back-link' href='/exhibition/'><Icon icon='arrow-left' /> Exhibitions</a>
					<Hero title={single.Title} align='start'>
						<div class='details'>
							<div class='tags'>
								{
									tags.map((tag) => (
										<>
											<Pill>{tag.text}</Pill>
										</>
									))
								}
							</div>
							<p class='description'>{single.Description}</p>
						</div>
					</Hero>
				</div>
			</header>
			<main class='wrapper'>
				<div class='stack gap-10 content'>
					{
						image.url != undefined && (
							<figure>
								<img src={`${baseURL}${image.url}`} alt={image.alternativeText} />
							</figure>
						)
					}
					{gallery && <SingleGallery id={id} gallery={gallery} baseURL={baseURL} />}

					<div class='content'>
						<Content />
					</div>
				</div>
			</main>
		</div>
		<ContactCTA />
	</div>
</BaseLayout>

<style>
	header {
		padding-bottom: 2.5rem;
		border-bottom: 1px solid var(--gray-800);
	}

	.back-link {
		display: none;
	}

	.details {
		display: flex;
		flex-direction: column;
		padding: 0.5rem;
		gap: 1.5rem;
		justify-content: space-between;
		align-items: center;
	}

	.tags {
		display: flex;
		gap: 0.5rem;
		flex-wrap: wrap;
		justify-content: flex-start;
	}

	.description {
		font-size: var(--text-lg);
		max-width: 54ch;
	}

	.content {
		max-width: 65ch;
		margin-inline: auto;
	}

	.content > :global(* + *) {
		margin-top: 1rem;
	}

	.content :global(h1),
	.content :global(h2),
	.content :global(h3),
	.content :global(h4),
	.content :global(h5) {
		margin: 1.5rem 0;
	}

	.content :global(img) {
		border-radius: 1.5rem;
		box-shadow: var(--shadow-sm);
		background: var(--gradient-subtle);
		border: 1px solid var(--gray-800);
	}

	.content :global(blockquote) {
		font-size: var(--text-lg);
		font-family: var(--font-brand);
		font-weight: 600;
		line-height: 1.1;
		padding-inline-start: 1.5rem;
		border-inline-start: 0.25rem solid var(--accent-dark);
		color: var(--gray-0);
	}

	.back-link,
	.content :global(a) {
		text-decoration: 1px solid underline transparent;
		text-underline-offset: 0.25em;
		transition: text-decoration-color var(--theme-transition);
	}

	.back-link:hover,
	.back-link:focus,
	.content :global(a:hover),
	.content :global(a:focus) {
		text-decoration-color: currentColor;
	}

	@media (min-width: 50em) {
		.back-link {
			display: block;
			align-self: flex-start;
		}

		.details {
			flex-direction: row;
			gap: 2.5rem;
		}

		.content :global(blockquote) {
			font-size: var(--text-2xl);
		}
	}
</style>
