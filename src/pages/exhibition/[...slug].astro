---
import {Debug} from 'astro/components';
import {CollectionEntry, getCollection} from 'astro:content';

import BaseLayout from '../../layouts/BaseLayout.astro';

import ContactCTA from '../../components/ContactCTA.astro';
import Hero from '../../components/Hero.astro';
import Icon from '../../components/Icon.astro';
import Pill from '../../components/Pill.astro';
import SingleGallery from '../../components/SingleGallery.astro';

interface Props {
	entry: CollectionEntry<'exhibition'>;
}

// This is a dynamic route that generates a page for every Markdown file in src/content/
// Read more about dynamic routes and this `getStaticPaths` function in the Astro docs:
// https://docs.astro.build/en/core-concepts/routing/#dynamic-routes
export async function getStaticPaths() {
	const exhibition = await getCollection('exhibition');
	return exhibition.map((entry) => ({
		params: {slug: entry.slug},
		props: {entry},
	}));
}

const {entry} = Astro.props;
const {Content} = await entry.render();

// take the id from the entry and remove the characters that start at . and after

const id = Number(entry.id.split('.')[0]);

// make id a number

const response = await fetch('https://strapi-ff64.onrender.com/api/artworks?populate=*');
const json = await response.json();
const baseURL = 'https://strapi-ff64.onrender.com';

// convert the data to an array

interface Artwork {
	id: number;
	attributes: {
		title: string;
		description: string;
		url: string;
		link_label: string;
		image: {
			data: {
				attributes: {
					url: string;
					alternativeText: string;
				};
			};
		};
		gallery: any;
		tag_group: {
			text: string;
		}[];
	};
}

const artworks: Artwork[] = json.data;

// filter the array to only include the artwork that matches the index then map the data inside the attributes object to its respective variables title, description, image, gallery, and tags

const {title, description, url, link_label, image, gallery, tag_group} = artworks
	.filter((artwork, i) => i + 1 === id)
	.map((artwork) => artwork.attributes)[0];

let featuredImage = {
	url: '',
	alternativeText: '',
};

let galleryData = {
	data: [],
};

if (gallery.data != undefined) {
	galleryData = gallery.data;
}
if (image.data != undefined && image.data.attributes != undefined) {
	featuredImage = image.data.attributes;
}
---

<BaseLayout title={title} description={description}>
	<div class='stack gap-20'>
		<div class='stack gap-15'>
			<header>
				<div class='wrapper stack gap-2'>
					<a class='back-link' href='/exhibition/'><Icon icon='arrow-left' /> Exhibitions</a>
					<Hero title={title} align='start'>
						<div class='details'>
							{
								tag_group.length > 0 && (
									<>
										<div class='tags'>
											{tag_group.map((tag) => (
												<>
													<Pill>{tag.text}</Pill>
												</>
											))}
										</div>
									</>
								)
							}
							<p class='description'>{description}</p>
						</div>
					</Hero>
				</div>
			</header>
			<main class='wrapper'>
				<div class='stack gap-10 content'>
					<div class='art'>
						{
							featuredImage.url && featuredImage.url.trim() !== '' && (
								<figure>
									<img src={`${baseURL}${featuredImage.url}`} alt={featuredImage.alternativeText} />
								</figure>
							)
						}
						<div class='render'>
							<a href={url} target='_blank' class='render__link'>{link_label} <Icon icon='magic' size='1.2em' /></a>
						</div>
					</div>

					{
						gallery.data && gallery.data.length > 0 && (
							<SingleGallery id={id} galleryData={gallery.data} baseURL={baseURL} />
						)
					}

					<div class='content'>
						<Content />
					</div>
				</div>
			</main>
		</div>
		<ContactCTA />
	</div>
</BaseLayout>

<style>
	header {
		padding-bottom: 2.5rem;
		border-bottom: 1px solid var(--gray-800);
	}
	.art {
		position: relative;
	}
	.render {
		position: absolute;
		top: 20px;
		left: 20px;
	}
	.render__link {
		position: relative;
		display: flex;
		place-content: center;
		text-align: center;
		padding: 0.56em 2em;
		gap: 0.8em;
		color: var(--accent-text-over);
		text-decoration: none;
		line-height: 1.1;
		border-radius: 999rem;
		overflow: hidden;
		background: var(--gradient-accent-orange);
		box-shadow: var(--shadow-md);
		white-space: nowrap;
	}

	@media (min-width: 768px) {
		.render__link {
			font-size: var(--text-lg);
		}
	}

	/* Overlay for hover effects. */
	.render__link::after {
		content: '';
		position: absolute;
		inset: 0;
		pointer-events: none;
		transition: background-color var(--theme-transition);
		mix-blend-mode: overlay;
	}

	.render__link:focus::after,
	.render__link:hover::after {
		background-color: hsla(var(--gray-999-basis), 0.3);
	}

	@media (min-width: 50em) {
		.render__link {
			padding: 1.125rem 2.5rem;
			font-size: var(--text-xl);
		}
	}
	.back-link {
		display: none;
	}

	.details {
		display: flex;
		flex-direction: column;
		padding: 0.5rem;
		gap: 1.5rem;
		justify-content: space-between;
		align-items: center;
	}

	.tags {
		display: flex;
		gap: 0.5rem;
		flex-wrap: wrap;
		justify-content: flex-start;
	}

	.description {
		font-size: var(--text-lg);
		max-width: 54ch;
	}

	.content {
		max-width: 83rem;
		margin-inline: auto;
	}

	.content > :global(* + *) {
		margin-top: 1rem;
	}

	.content :global(h1),
	.content :global(h2),
	.content :global(h3),
	.content :global(h4),
	.content :global(h5) {
		margin: 1.5rem 0;
	}

	.content :global(img) {
		border-radius: 1.5rem;
		box-shadow: var(--shadow-sm);
		background: var(--gradient-subtle);
		border: 1px solid var(--gray-800);
	}

	.content :global(blockquote) {
		font-size: var(--text-lg);
		font-family: var(--font-brand);
		font-weight: 600;
		line-height: 1.1;
		padding-inline-start: 1.5rem;
		border-inline-start: 0.25rem solid var(--accent-dark);
		color: var(--gray-0);
	}

	.back-link,
	.content :global(a) {
		text-decoration: 1px solid underline transparent;
		text-underline-offset: 0.25em;
		transition: text-decoration-color var(--theme-transition);
	}

	.back-link:hover,
	.back-link:focus,
	.content :global(a:hover),
	.content :global(a:focus) {
		text-decoration-color: currentColor;
	}

	@media (min-width: 768px) {
		.back-link {
			display: block;
			align-self: flex-start;
		}

		.details {
			flex-direction: column;
			gap: 2.5rem;
			justify-content: flex-start;
			align-items: flex-start;
		}

		.content :global(blockquote) {
			font-size: var(--text-2xl);
		}
	}
	@media (min-width: 1024px) {
		.back-link {
			display: block;
			align-self: flex-start;
		}

		.details {
			flex-direction: row;
			gap: 2.5rem;
			justify-content: space-between;
			align-items: center;
		}

		.content :global(blockquote) {
			font-size: var(--text-2xl);
		}
	}
</style>
